<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-service-app</artifactId>
	<packaging>war</packaging>

	<name>rps-tourney-service-app</name>
	<description>
		The server-side implementation of the web service layer of the 
		"Rock-Paper-Scissors Tourney" game, which allow for play over the Internet.
	</description>

	<properties>
		<!-- Java 1.7 is required by the Eclipse JAX-RS plugin. -->
		<javaSourceVersion>1.7</javaSourceVersion>

		<!-- The version of the Apache CXF artifacts to use. -->
		<cxf.version>3.0.0-milestone1</cxf.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-api</artifactId>
		</dependency>

		<dependency>
			<!-- Apache CXF is the framework used to run the JAX-RS web service in 
				this project. -->
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<!-- A version of this library is needed to compile, but will already 
				be bundled with whatever application server this WAR is deployed to. -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<exclusion>
					<!-- We're using SLF4J to handle logging, so need to exclude this and 
						then include org.slf4j:jcl-over-slf4j in its place. -->
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used to re-route commons-logging:commons-logging calls to SLF4J. 
				Seems that spring-web needs this. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- The Spring framework's JPA-related APIs, which make working with 
				JPA a bit easier. -->
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>1.4.3.RELEASE</version>
		</dependency>

		<dependency>
			<!-- Hibernate is a popular ORM that implements the JPA 2.1 spec. It's 
				used for building and interacting with the application's SQL database. -->
			<groupId>.org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
			<exclusions>
				<exclusion>
					<!-- These interfaces, etc. are now included in the JRE. -->
					<artifactId>xml-apis</artifactId>
					<groupId>xml-apis</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Provides the Hibernate mappings required to persist the org.threetenbp:threetenbp 
				classes correctly. -->
			<groupId>org.jadira.usertype</groupId>
			<artifactId>usertype.extended</artifactId>
			<version>3.1.0.CR10</version>
		</dependency>
		<dependency>
			<!-- JDBC drivers for the PostgreSQL open source RDBMS. This version supports 
				Java 7 and above (the '-jdbc4' version supports Java 6 and above). -->
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.3-1100-jdbc41</version>
		</dependency>

		<dependency>
			<!-- Needed to replace log4j, which is used by other dependencies here 
				(and excluded). -->
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<!-- Provides access to both a native (platform-specific) and a pure-Java 
				implementation of the scrypt key derivation function. -->
			<groupId>com.lambdaworks</groupId>
			<artifactId>scrypt</artifactId>
			<version>1.4.0</version>
		</dependency>

		<dependency>
			<!-- Provides the InternetAddress class used to represent email addresses 
				in this project. -->
			<!-- Scoped as 'provided' because it's the responsibility of the web application 
				container to provide this artifact. -->
			<groupId>org.eclipse.jetty.orbit</groupId>
			<artifactId>javax.mail.glassfish</artifactId>
			<version>1.4.1.v201005082020</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<!-- An in-memory embedded SQL DB. Used to speed up DB-related tests. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Jetty is used to host the web service for ITs. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>9.0.6.v20130930</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Jetty is used to host the web service for ITs. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>9.0.6.v20130930</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used to generate the SSL cert that is used in the ITs (by Jetty). -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.49</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging 
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<!-- Set the Java source version used by the compiler. -->
						<source>${javaSourceVersion}</source>
						<target>${javaSourceVersion}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<!-- For some mysterious reason, I get SocketExceptions if I run the 
							ITs on OpenJDK without forking for each test. I'd guess that there's a bug 
							in OpenJDK's HttpClient, but I really haven't been able to diagnose the issue. -->
						<reuseForks>false</reuseForks>

						<!-- Run the ITs in parallel, using a separate fork for each runner. -->
						<forkCount>1.5C</forkCount>
						<redirectTestOutputToFile>true</redirectTestOutputToFile>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
