<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-webapp</artifactId>
	<packaging>war</packaging>

	<name>rps-tourney-webapp</name>
	<description>
		A web application for playing the "Rock-Paper-Scissors Tourney" game.
		Uses rps-tourney-service-app to handle all gameplay (and a bunch of 
		other functions.)
	</description>

	<properties>
		<!-- The version of Java to use. -->
		<javaSourceVersion>1.7</javaSourceVersion>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-api</artifactId>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>
		<dependency>
			<!-- The Spring MVC web framework (which includes many other Spring libraries, 
				including their dependency injection framework). -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<exclusion>
					<!-- We're using SLF4J to handle logging, so need to exclude this and 
						then include org.slf4j:jcl-over-slf4j in its place. -->
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used to re-route commons-logging:commons-logging calls to SLF4J. 
				Seems that spring-webmvc needs this. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- TODO: Not entirely sure why this is needed, but every Spring MVC 
				tutorial I've seen seems to have it. -->
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- Jetty is used to host the web service for ITs and to run the web 
				application for manual development testing. -->
			<!-- This dependency is marked optional (rather than being scoped 'test') 
				to ensure that Jetty is also available during development on the main/runtime 
				classpath (for launching inside of Eclipse). -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>9.0.6.v20130930</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- Allows Jetty to also run the JSP views used in the application. -->
			<!-- This dependency is marked optional (rather than being scoped 'test') 
				to ensure that Jetty is also available during development on the main/runtime 
				classpath (for launching inside of Eclipse). -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-jsp</artifactId>
			<version>9.0.6.v20130930</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- Used to re-route java.util.logging calls to SLF4J. Seems that jetty-jsp 
				needs this. -->
			<!-- See http://www.slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html 
				for details on how to activate this re-routing within an application. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- Used to generate the SSL cert that is used in the ITs (by Jetty). -->
			<!-- This dependency is marked optional (rather than being scoped 'test') 
				to ensure that Jetty is also available during development on the main/runtime 
				classpath (for launching inside of Eclipse). -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.49</version>
			<optional>true</optional>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging 
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<!-- Set the Java source version used by the compiler. -->
						<source>${javaSourceVersion}</source>
						<target>${javaSourceVersion}</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
