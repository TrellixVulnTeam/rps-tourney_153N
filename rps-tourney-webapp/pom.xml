<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-webapp</artifactId>
	<packaging>war</packaging>

	<name>rps-tourney-webapp</name>
	<description>
		A web application for playing the "Rock-Paper-Scissors Tourney" game.
		Uses rps-tourney-service-app to handle all gameplay (and a bunch of 
		other functions.)
	</description>

	<properties>
		<!-- The version of the Spring Security framework artifacts to use. Note 
			that this library has a different release cycle (and version number) than 
			the "core" Spring Framework project. -->
		<spring.security.version>3.2.4.RELEASE</spring.security.version>

		<!-- The version of the Jetty webapp container to use. -->
		<jetty.version>9.0.6.v20130930</jetty.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- This BOM is required to avoid problems caused by the different (but 
					compatible) versions of Spring MVC and Spring Security being used here. -->
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-client</artifactId>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>

		<dependency>
			<!-- A version of this library is needed to compile, but will already 
				be bundled with whatever application server this WAR is deployed to. -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- The Spring MVC web framework (which includes many other Spring libraries, 
				including their dependency injection framework). -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<exclusions>
				<exclusion>
					<!-- We're using SLF4J to handle logging, so need to exclude this and 
						then include org.slf4j:jcl-over-slf4j in its place. -->
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used to re-route commons-logging:commons-logging calls to SLF4J. 
				Seems that spring-webmvc needs this. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- Required because JSP views are used in Spring MVC. -->
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- Provides annotations for securing resources, e.g. @RolesAllowed, 
				@PermitAll, etc. -->
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging 
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<!-- Used to re-route java.util.logging calls to SLF4J. Seems that at 
				least jetty-jsp needs this, and we'll include it in the compile scope just 
				to cover anything else that might be. -->
			<!-- See http://www.slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html 
				for details on how to activate this re-routing within an application. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<!-- The web service WAR, which also needs to be deployed during integration 
				testing. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-app</artifactId>
			<version>${project.version}</version>
			<type>war</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- An in-memory embedded SQL DB. Used as a fast and easy-to-provision 
				DB for unit/integration tests. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.42.2</version>
			<scope>test</scope>
			<exclusions>
				<!-- Selenium depends on HtmlUnit, which depends on an old version of 
					Jetty. We're excluding that dependency here so that it doesn't interfere 
					with our direct inclusion of Jetty. -->
				<exclusion>
					<artifactId>jetty-websocket</artifactId>
					<groupId>org.eclipse.jetty</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<!-- Jetty is used to host the web application for development testing, 
				via WebAppJettyLauncher. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used to generate any SSL certs that might be used with Jetty. -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.49</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Allows Jetty to also run the JSP views used in the application. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-jsp</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<!-- Set the Java source version used by the compiler. -->
						<source>${javaSourceVersion}</source>
						<target>${javaSourceVersion}</target>
					</configuration>
				</plugin>
				<plugin>
					<!-- Configure the Cargo plugin to start up an embedded Jetty server, 
						running both this project's WAR and the WAR for the web service that it interacts 
						with. -->
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<configuration>
						<container>
							<containerId>jetty9x</containerId>
							<artifactInstaller>
								<!-- Use a throwaway Jetty install (in the project's target/ directory) 
									to run the ITs. Tried using an embedded Jetty instance via Cargo, but the 
									web application fails to deploy that way for some reason: it throws "java.lang.IllegalStateException: 
									zip file closed" errors. -->
								<groupId>org.eclipse.jetty</groupId>
								<artifactId>jetty-distribution</artifactId>
								<version>${jetty.version}</version>
							</artifactInstaller>
							<log>${project.build.directory}/failsafe-reports/cargo.log</log>
							<output>${project.build.directory}/failsafe-reports/cargo-container.log</output>
							<systemProperties>
								<rps.service.config.path>${project.build.testOutputDirectory}/rps-service-config-its.xml</rps.service.config.path>
								<rps.webapp.config.path>${project.build.testOutputDirectory}/rps-webapp-config-its.xml</rps.webapp.config.path>
								<logback.configurationFile>${project.build.testOutputDirectory}/logback-cargo.xml</logback.configurationFile>
							</systemProperties>
							<dependencies>
								<dependency>
									<!-- Only used by the web service WAR, but no harm in adding it 
										to the container's classpath. -->
									<groupId>org.hsqldb</groupId>
									<artifactId>hsqldb</artifactId>
								</dependency>
							</dependencies>
						</container>
						<configuration>
							<properties>
								<cargo.servlet.port>9093</cargo.servlet.port>
							</properties>
						</configuration>
						<deployables>
							<deployable>
								<!-- The web service WAR for the application. -->
								<groupId>com.justdavis.karl.rpstourney</groupId>
								<artifactId>rps-tourney-service-app</artifactId>
								<type>war</type>
								<properties>
									<context>/rps-tourney-service-app</context>
								</properties>
							</deployable>
							<deployable>
								<!-- The end-user web site WAR for the application. As this is the 
									current project, Cargo binds the artifact automatically. All that needs to 
									be done here is to configure the context path. -->
								<groupId>com.justdavis.karl.rpstourney</groupId>
								<artifactId>rps-tourney-webapp</artifactId>
								<type>war</type>
								<properties>
									<context>/rps-tourney-webapp</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
						<configuration>
							<destFile>${sonar.jacoco.itReportPath}</destFile>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Launch an embedded Jetty instance hosting this project's WAR (as 
					well as the rps-tourney-service-app WAR it depends on) prior to running this 
					project's integration tests, and stop it after the integration tests. Alternatively, 
					for manual testing, manually run 'mvn cargo:run' to start the Jetty server, 
					and have Cargo wait for a 'ctrl+c' command to stop it. -->
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<executions>
					<execution>
						<id>start-container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-container</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
